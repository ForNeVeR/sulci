(* DO NOT EDIT MANUALLY *)
(*  *)
(* generated by sqlgg 0.2.3-49-g30df037 on 2010-01-14T17:45Z *)

module Make (T : Sqlgg_traits.M) = struct

  let create_talkers db  =
    T.execute db "CREATE TABLE IF NOT EXISTS talkers (jid varchar, nick varchar, room varchar, words int, me int, sentences int)" T.no_params 

  let create_index_talkers_idx db  =
    T.execute db "CREATE INDEX IF NOT EXISTS talkers_idx ON talkers (jid, room)" T.no_params 

  let create_index_words_idx db  =
    T.execute db "CREATE INDEX IF NOT EXISTS words_idx ON talkers (words)" T.no_params 

  let test_nick db ~nick ~room =
    let get_row stmt =
      (T.get_column_Int stmt 0)
    in
    let set_params stmt =
      let p = T.start_params stmt 2 in
      T.set_param_Text p 0 nick;
      T.set_param_Text p 1 room;
      T.finish_params p
    in
    T.select1 db "SELECT 1 FROM talkers WHERE nick=@nick AND room=@room LIMIT 1" set_params get_row

  let test_jid db ~jid ~room =
    let get_row stmt =
      (T.get_column_Int stmt 0)
    in
    let set_params stmt =
      let p = T.start_params stmt 2 in
      T.set_param_Text p 0 jid;
      T.set_param_Text p 1 room;
      T.finish_params p
    in
    T.select1 db "SELECT 1 FROM talkers WHERE jid=@jid AND room=@room limit 1" set_params get_row

  let update_by_nick db ~words ~sentences ~me ~nick ~room =
    let set_params stmt =
      let p = T.start_params stmt 5 in
      T.set_param_Int p 0 words;
      T.set_param_Int p 1 sentences;
      T.set_param_Int p 2 me;
      T.set_param_Text p 3 nick;
      T.set_param_Text p 4 room;
      T.finish_params p
    in
    T.execute db "UPDATE talkers SET words=words+@words, sentences=sentences+@sentences, me=me+@me WHERE nick=@nick AND room=@room" set_params 

  let update_by_jid db ~words ~sentences ~me ~jid ~room =
    let set_params stmt =
      let p = T.start_params stmt 5 in
      T.set_param_Int p 0 words;
      T.set_param_Int p 1 sentences;
      T.set_param_Int p 2 me;
      T.set_param_Text p 3 jid;
      T.set_param_Text p 4 room;
      T.finish_params p
    in
    T.execute db "UPDATE talkers SET words=words+@words, sentences=sentences+@sentences, me=me+@me WHERE jid=@jid AND room=@room" set_params 

  let insert_new db ~jid ~nick ~room ~words ~me ~sentences =
    let set_params stmt =
      let p = T.start_params stmt 6 in
      T.set_param_Text p 0 jid;
      T.set_param_Text p 1 nick;
      T.set_param_Text p 2 room;
      T.set_param_Int p 3 words;
      T.set_param_Int p 4 me;
      T.set_param_Int p 5 sentences;
      T.finish_params p
    in
    T.execute db "INSERT INTO talkers (jid, nick, room, words, me, sentences) VALUES (@jid,@nick,@room,@words,@me,@sentences)" set_params 

  let select_talkers_by_nick db ~room ~nick callback =
    let invoke_callback stmt =
      callback
        (T.get_column_Text stmt 0)
        (T.get_column_Int stmt 1)
        (T.get_column_Int stmt 2)
        (T.get_column_Int stmt 3)
    in
    let set_params stmt =
      let p = T.start_params stmt 2 in
      T.set_param_Text p 0 room;
      T.set_param_Text p 1 nick;
      T.finish_params p
    in
    T.select db "SELECT nick, words, me, sentences FROM talkers WHERE room=@room AND nick LIKE @nick ORDER BY words DESC, sentences ASC" set_params invoke_callback

  let select_talkers_limit db ~room callback =
    let invoke_callback stmt =
      callback
        (T.get_column_Text stmt 0)
        (T.get_column_Int stmt 1)
        (T.get_column_Int stmt 2)
        (T.get_column_Int stmt 3)
    in
    let set_params stmt =
      let p = T.start_params stmt 1 in
      T.set_param_Text p 0 room;
      T.finish_params p
    in
    T.select db "SELECT nick, words, me, sentences FROM talkers WHERE room=@room ORDER BY words DESC, sentences ASC LIMIT 10" set_params invoke_callback

  module Fold = struct
    let create_talkers db  =
      T.execute db "CREATE TABLE IF NOT EXISTS talkers (jid varchar, nick varchar, room varchar, words int, me int, sentences int)" T.no_params 

    let create_index_talkers_idx db  =
      T.execute db "CREATE INDEX IF NOT EXISTS talkers_idx ON talkers (jid, room)" T.no_params 

    let create_index_words_idx db  =
      T.execute db "CREATE INDEX IF NOT EXISTS words_idx ON talkers (words)" T.no_params 

    let test_nick db ~nick ~room =
      let get_row stmt =
        (T.get_column_Int stmt 0)
      in
      let set_params stmt =
        let p = T.start_params stmt 2 in
        T.set_param_Text p 0 nick;
        T.set_param_Text p 1 room;
        T.finish_params p
      in
      T.select1 db "SELECT 1 FROM talkers WHERE nick=@nick AND room=@room LIMIT 1" set_params get_row

    let test_jid db ~jid ~room =
      let get_row stmt =
        (T.get_column_Int stmt 0)
      in
      let set_params stmt =
        let p = T.start_params stmt 2 in
        T.set_param_Text p 0 jid;
        T.set_param_Text p 1 room;
        T.finish_params p
      in
      T.select1 db "SELECT 1 FROM talkers WHERE jid=@jid AND room=@room limit 1" set_params get_row

    let update_by_nick db ~words ~sentences ~me ~nick ~room =
      let set_params stmt =
        let p = T.start_params stmt 5 in
        T.set_param_Int p 0 words;
        T.set_param_Int p 1 sentences;
        T.set_param_Int p 2 me;
        T.set_param_Text p 3 nick;
        T.set_param_Text p 4 room;
        T.finish_params p
      in
      T.execute db "UPDATE talkers SET words=words+@words, sentences=sentences+@sentences, me=me+@me WHERE nick=@nick AND room=@room" set_params 

    let update_by_jid db ~words ~sentences ~me ~jid ~room =
      let set_params stmt =
        let p = T.start_params stmt 5 in
        T.set_param_Int p 0 words;
        T.set_param_Int p 1 sentences;
        T.set_param_Int p 2 me;
        T.set_param_Text p 3 jid;
        T.set_param_Text p 4 room;
        T.finish_params p
      in
      T.execute db "UPDATE talkers SET words=words+@words, sentences=sentences+@sentences, me=me+@me WHERE jid=@jid AND room=@room" set_params 

    let insert_new db ~jid ~nick ~room ~words ~me ~sentences =
      let set_params stmt =
        let p = T.start_params stmt 6 in
        T.set_param_Text p 0 jid;
        T.set_param_Text p 1 nick;
        T.set_param_Text p 2 room;
        T.set_param_Int p 3 words;
        T.set_param_Int p 4 me;
        T.set_param_Int p 5 sentences;
        T.finish_params p
      in
      T.execute db "INSERT INTO talkers (jid, nick, room, words, me, sentences) VALUES (@jid,@nick,@room,@words,@me,@sentences)" set_params 

    let select_talkers_by_nick db ~room ~nick callback acc =
      let invoke_callback stmt =
        callback
          (T.get_column_Text stmt 0)
          (T.get_column_Int stmt 1)
          (T.get_column_Int stmt 2)
          (T.get_column_Int stmt 3)
      in
      let set_params stmt =
        let p = T.start_params stmt 2 in
        T.set_param_Text p 0 room;
        T.set_param_Text p 1 nick;
        T.finish_params p
      in
      let r_acc = ref acc in
      T.select db "SELECT nick, words, me, sentences FROM talkers WHERE room=@room AND nick LIKE @nick ORDER BY words DESC, sentences ASC" set_params (fun x -> r_acc := invoke_callback x !r_acc);
      !r_acc

    let select_talkers_limit db ~room callback acc =
      let invoke_callback stmt =
        callback
          (T.get_column_Text stmt 0)
          (T.get_column_Int stmt 1)
          (T.get_column_Int stmt 2)
          (T.get_column_Int stmt 3)
      in
      let set_params stmt =
        let p = T.start_params stmt 1 in
        T.set_param_Text p 0 room;
        T.finish_params p
      in
      let r_acc = ref acc in
      T.select db "SELECT nick, words, me, sentences FROM talkers WHERE room=@room ORDER BY words DESC, sentences ASC LIMIT 10" set_params (fun x -> r_acc := invoke_callback x !r_acc);
      !r_acc

  end (* module Fold *)
end (* module Make *)
